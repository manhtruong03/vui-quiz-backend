package com.vuiquiz.quizwebsocket.dto;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.Valid; // Ensure this is from jakarta.validation
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;
import java.util.UUID;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
@Schema(description = "Represents a Quiz, used for both creation requests and responses")
public class QuizDTO {

    @Schema(description = "Unique Quiz Identifier (generated by backend for responses)", example = "mock-quiz-1234-all-types-abcd")
    @JsonProperty("uuid")
    private UUID quizId;

    @Schema(description = "User ID of the creator (set by backend based on authenticated user)", example = "39567e72-f833-4bcc-80b0-0c2b02d6c921")
    @JsonProperty("creator") // Matches frontend mock field name for responses
    private UUID creatorId; // Populated by backend for responses. Not expected in request body from client.

    @Schema(description = "Username of the creator (populated by backend for responses)", example = "MockUser")
    @JsonProperty("creator_username")
    private String creatorUsername;

    @NotNull(message = "Visibility must be provided.")
    @Schema(description = "Visibility status (e.g., 1 for public, 0 for private)", example = "1", requiredMode = Schema.RequiredMode.REQUIRED)
    private Integer visibility;

    @NotBlank(message = "Quiz title cannot be blank.")
    @Schema(description = "Quiz title", example = "Sample Quiz - All Question Types", requiredMode = Schema.RequiredMode.REQUIRED)
    private String title;

    @Schema(description = "Quiz description", example = "This quiz contains one example of each question type for frontend mocking purposes.")
    private String description;

    @Schema(description = "General type of the quiz, from mock's 'quizType'. Consider if this maps to a Quiz 'status' or a dedicated field.", example = "quiz")
    private String quizType; // From mock

    @Schema(description = "URL (file_path) of the cover image for the quiz. Provided in requests and responses.",
            example = "https://placehold.co/600x400/orange/white?text=Sample+Quiz+Cover")
    @JsonProperty("cover") // Matches mock field name for request and response
    private String cover; // This field will hold the URL (filePath)

    @Schema(description = "Lobby video details.")
    @JsonProperty("lobby_video")
    @Valid // To enable validation of nested VideoDetailDTO if it has constraints
    private VideoDetailDTO lobbyVideo;

    @Valid // To enable validation of nested QuestionDTOs
    @NotEmpty(message = "A quiz must have at least one question.")
    @Schema(description = "Array of Question Objects", requiredMode = Schema.RequiredMode.REQUIRED)
    private List<QuestionDTO> questions;

    @Schema(description = "The number of questions in this quiz. Populated by the backend.", example = "10")
    private Integer questionCount;

    // --- Fields primarily for response, populated by backend ---
    @Schema(description = "Server-side validation flag (populated by backend for responses)", example = "true")
    private Boolean isValid;

    @Schema(description = "Flag indicating if guests can play (game session property, not quiz typically)", example = "true")
    private Boolean playAsGuest; // From mock

    @Schema(description = "Status of the quiz (e.g., DRAFT, PUBLISHED). If not provided in request, defaults to DRAFT.", example = "DRAFT")
    private String status; // ADD THIS FIELD

    @Schema(description = "Redundant type field from mock? Matches mock's 'type' field.", example = "quiz")
    private String type; // From mock

    @Schema(description = "Creation timestamp (Unix millis, populated by backend for responses)", example = "1678886400000")
    private Long created;

    @Schema(description = "Last modified timestamp (Unix millis, populated by backend for responses)", example = "1745286000000")
    private Long modified;

    @Schema(description = "List of tag names associated with the quiz. Provided during creation, included in responses.",
            example = "[\"Science\", \"2019\", \"Trivia\"]")
    private List<String> tags;

    @Schema(description = "Calculated total time limit (in milliseconds) for all questions in the quiz. Only present in specific responses like /my-quizzes.",
            example = "300000", nullable = true)
    private Integer totalQuizTimeLimitMs;
}