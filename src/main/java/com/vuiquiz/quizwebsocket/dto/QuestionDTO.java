package com.vuiquiz.quizwebsocket.dto;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.PositiveOrZero;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;
import java.util.UUID;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
@Schema(description = "Represents a single question or content slide within a quiz")
public class QuestionDTO {

    @Schema(description = "Unique identifier for the question (generated by backend for response)", example = "04647f0f-71a8-4858-91ffa-2c1697996950")
    private UUID id;

    @NotBlank(message = "Question type must be provided.")
    @Schema(description = "Type of the question block", example = "quiz", requiredMode = Schema.RequiredMode.REQUIRED,
            allowableValues = {"content", "quiz", "jumble", "survey", "open_ended"})
    private String type;

    @NotBlank(message = "Question title/text must be provided.")
    @Schema(description = "The question text, or title for 'content' type slides. Can contain HTML.", example = "Which technology is NOT part of the frontend stack?", requiredMode = Schema.RequiredMode.REQUIRED)
    private String title;

    @Schema(description = "Detailed description, primarily for 'content' type slides.", example = "This section will test your knowledge...")
    private String description;

    @Schema(description = "Time limit for the question in milliseconds. Not applicable for 'content' type.", example = "30000")
    private Integer time;

    @Schema(description = "Points multiplier for the question. Not applicable for 'content' or 'survey' types.", example = "1")
    private Integer pointsMultiplier;

    @Valid // To enable validation of nested ChoiceDTOs
    @Schema(description = "List of choices for the question. Structure depends on the question type. Not applicable for 'content' type where it can be null/empty.")
    private List<ChoiceDTO> choices;

    @Schema(description = "URL (file_path) of the main image associated with the question. Provided in responses after upload.",
            example = "https://your-server/files/images/unique_q_key_789.png", nullable = true)
    private String image; // This field will hold the URL (filePath) for responses

    @Schema(description = "Unique key generated by the client to associate with this question's image file part in a multipart request. Used during quiz creation if an image for this question is uploaded.",
            example = "q1_img_ref_abc", nullable = true)
    @JsonProperty("questionImageUploadKey") // Ensure JSON key matches what frontend sends
    private String questionImageUploadKey; // New field

    @Schema(description = "Video details associated with the question.")
    @Valid // To enable validation of nested VideoDetailDTO if it has constraints
    private VideoDetailDTO video;

    @Schema(description = "Array for additional media elements (e.g., URLs or structured objects). For now, simple strings.", example = "[]")
    private List<String> media;

    @PositiveOrZero(message = "Position must be a non-negative integer if provided.")
    @Schema(description = "0-based order/position of this question within the quiz. If omitted, it will be assigned based on array order.", example = "1")
    private Integer position;
}